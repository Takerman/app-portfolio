//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tanyo.Portfolio.Web.Resources.Views.Blog {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class post_grafana_monitoringru {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal post_grafana_monitoringru() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Tanyo.Portfolio.Web.Resources.Views.Blog.post-grafana-monitoringru", typeof(post_grafana_monitoringru).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Эта рабочая область содержит статистику использования ЦП, памяти, жесткого диска, температуры ЦП, других ресурсов, памяти подкачки и времени простоя сервера.
        ///
        ///Есть некоторые вещи, которые мне откровенно не нравятся в Grafana. Во-первых, у меня не так много готовых вещей, и мне приходится делать все самому или скачивать панель инструментов из Интернета и модифицировать ее под свои нужды. Второе, и самое важное для меня, это то, что сам парсинг требует много ресурсов и немного накладных расходов. Кроме того [rest of string was truncated]&quot;;.
        /// </summary>
        public static string grafana_content {
            get {
                return ResourceManager.GetString("grafana-content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to В этом посте я покажу вам, как я анализирую и просматриваю статистику своего сервера. Это был долгий процесс выбора, и я просмотрел довольно много инструментов анализа, прежде чем выбрать этот. Сначала я знал, что Grafana — хороший инструмент и думал об этом, но не хотел становиться тривиальным и решил попробовать Netdata, потом попробовал Checkmk, потом WebMin, потом другие, но в итоге решил, что Grafana — это инструмент, который дает мне наибольшую свободу в изменении представления и самый большой набор с [rest of string was truncated]&quot;;.
        /// </summary>
        public static string grafana_intro {
            get {
                return ResourceManager.GetString("grafana-intro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to В целом, у Grafana есть свои плюсы и минусы. Я использую довольно много других инструментов, таких как Microsoft AppInsights, которые дали мне довольно хорошую статистику и не повредили производительности. Но это если мы используем Azure, а я сейчас на хосте Docker. Я также пока не вижу места для получения предупреждений и подробных данных об ошибках системы, как у DataDog. Сначала я использовал DataDog, но я не хочу, чтобы системные данные хранились в иностранных компаниях, поэтому я чувствую, что данные н [rest of string was truncated]&quot;;.
        /// </summary>
        public static string grafana_outro {
            get {
                return ResourceManager.GetString("grafana-outro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Графана мониторинг.
        /// </summary>
        public static string grafana_title {
            get {
                return ResourceManager.GetString("grafana-title", resourceCulture);
            }
        }
    }
}
