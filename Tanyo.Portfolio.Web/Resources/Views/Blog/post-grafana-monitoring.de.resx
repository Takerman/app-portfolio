<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="grafana-content" xml:space="preserve">
    <value>Dieser Arbeitsbereich enthält Statistiken zu CPU-Auslastung, Arbeitsspeicher, Festplatte, CPU-Temperatur, anderen Ressourcen, SWAP-Speicher und Serverausfallzeit.

Es gibt einige Dinge, die ich an Grafana ehrlich gesagt nicht mag. Erstens bekomme ich nicht viele Dinge von der Stange und muss alles selbst machen oder ein Dashboard aus dem Internet herunterladen und für meine Bedürfnisse anpassen. Die zweite Sache, und die wichtigste für mich, ist, dass das Parsen selbst viele Ressourcen verbraucht und ein bisschen Overhead ist. Außerdem müssen wir beim Erstellen eines Dashboards verschiedene Datensätze verwenden, die auch bestimmten Speicher von dem der Maschine zuweisen. Node_Exporter verwendet viel Speicher und ich werde versuchen, ihn in Zukunft zu reduzieren.

Ich verwende einen anderen Desktop, der mir Statistiken über Docker und die darin enthaltenen Container liefert. Von dort erfuhr ich von den verschiedenen Exporteuren etwas über die Speicherzuweisung. Es gibt mir einen klareren Überblick über die Containerleistung, und auf dieser Grundlage kann ich entscheiden, wem ich wie viel Speicher zuweisen soll, und wenn es sich um ein handgefertigtes System handelt, wo ich es verbessern kann. Hier ist die zweite Arbeitsumgebung:</value>
  </data>
  <data name="grafana-intro" xml:space="preserve">
    <value>In diesem Beitrag zeige ich Ihnen, wie ich meine Serverstatistiken auswerte und einsehe. Es war ein langer Auswahlprozess und ich habe einige Analysetools durchlaufen, bevor ich mich für dieses entschieden habe. Zuerst wusste ich, dass Grafana ein gutes Tool ist und dachte darüber nach, aber ich wollte nicht trivial werden und entschied mich, Netdata auszuprobieren, dann probierte ich Checkmk, dann WebMin, dann andere, aber am Ende entschied ich, dass Grafana es ist das Tool, das mir die größte Freiheit gibt, die Ansicht zu ändern, und den größten Satz an Statistiken, obwohl ich denke, dass Netdata ziemlich viel Out-of-the-Box bietet, anstatt sie manuell selbst zu erstellen.

Hier sehen Sie ein Bild meines Haupt-Grafana-Arbeitsbereichs. Dies ist meine Homepage und zeigt die Ressourcennutzung.
Ich habe andere, die die Verwendung von Containern usw. zeigen:</value>
  </data>
  <data name="grafana-outro" xml:space="preserve">
    <value>Insgesamt hat Grafana seine Vor- und Nachteile. Ich verwende einige andere Tools, wie z. B. Microsofts AppInsights, die mir ziemlich gute Statistiken lieferten und die Produktivität nicht beeinträchtigten. Aber das ist, wenn wir Azure verwenden und ich mich derzeit auf einem Docker-Host befinde. Ich kann auch noch keinen Ort finden, an dem Warnmeldungen und detaillierte Systemfehlerdaten wie bei DataDog abgerufen werden können. Zuerst habe ich DataDog verwendet, aber ich möchte nicht, dass die Systemdaten in ausländischen Unternehmen aufbewahrt werden, daher habe ich das Gefühl, dass ich die Daten nicht besitze, sie werden von anderen Personen verwendet, insbesondere wenn sie Daten analysieren.

Insgesamt bietet Grafana ziemlich viel Freiheit, Privatsphäre und eine schöne Präsentation der Daten.

Ich hoffe, Ihnen hat gefallen, was ich geschrieben habe. Ich habe versucht, so viele Details wie möglich zu speichern.

Vielen Dank fürs Lesen, bis bald,
Tanjo</value>
  </data>
  <data name="grafana-title" xml:space="preserve">
    <value>Grafana-Überwachung</value>
  </data>
</root>