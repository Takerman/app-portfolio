<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="grafana-content" xml:space="preserve">
    <value>В тази работна площ има статистики за използването на процесор, памет, хард диск, темепература на процесора, други ресурси, SWAP памет и време през, което сървърът не се е изключвал.

Има някой неща, които не ми харесват откровенно казано в Графана. Първото е, че не получавам много неща готови и всичко трябва да си направя сам или да си сваля dashboard от интернет и да го модифицирам за моите нужди. Второто нещо и най-важното за мен, е че самото анализиране ползва много ресурси и е малко като overhead. Освен това, когато се създава някой dashboard, то ние трябва да ползваме различни datasets, които също заделят определена памет от тази на машината. Node_Exporter ползва доста памет и в бъдеще ще разгледам как да я намаля. 

Ползвам още една работна среда, която ми дава статистики за Docker и за контеинерите в него. От там разбрах за заделянето на памет от различните експортери. Тя ми дава по-ясен поглед към произведителността на контейнерите и спрямо това мога да реша, за кой колко памет да заделя и ако е ръчно създадена система, на кои места да я подобря. Ето я и втората работна среда:</value>
  </data>
  <data name="grafana-intro" xml:space="preserve">
    <value>В този пост ще ви покажа как аз анализирам и разглеждам статистиките за сървърът си. Беше дълъг процес на избор и преминах през доста анализиращи инструменти докато избера този. Първоначално знаех, че Графана е добър инструмент и мислих за него, но не исках да ставам тривиален и реших да пробвам със Netdata, после пробвах със Checkmk, после със WebMin, после със други, но в крайна сметка реших, че Grafana е инструмента, който ми дава най-голяма свобода на промяна на изгледа и най-голям набор от статистки, въпреки че мисля, че Netdata дава доста out-of-the-box вместо сам ръчно да ги създаваш.

Ето тук можете да разгледате снимка на главната ми работна среда в Grafana. Това е началната ми страница и показва използването на ресурси.
Имам и други, които показват използването на контейнери и тн:</value>
  </data>
  <data name="grafana-outro" xml:space="preserve">
    <value>Като цяло Grafana има своите плюсове и минуси. Ползвам съм доста други инструменти, като примерно AppInsights на Microsoft ми даде доста добри статистики, а не намали произведителността. Но това е ако ползваме Azure, а в момента съм на Docker host. Също не мога да видя все още място от, което да получавам Alerts нотификации, и подробни данни за грешки в системата каквито има в  DataDog. Отначало ползвах DataDog, но не искам данните за системите да се пазят в чужди компании, така имам чувството, че не притежавам данните, а те се ползват от други хора, особено ако са анализиращи данни.

Като цяло Grafana дава доста свобода, конфеденциалност и красиво предоставяне на данните. 

Надявам се, че написаното ви е харесало, като се опитах да спестя възможно най-много детайли.

Благодаря ви за четенето, До скоро,
Таньо</value>
  </data>
  <data name="grafana-title" xml:space="preserve">
    <value>Графана мониторинг</value>
  </data>
</root>