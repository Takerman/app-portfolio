<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="grafana-content" xml:space="preserve">
    <value>Эта рабочая область содержит статистику использования ЦП, памяти, жесткого диска, температуры ЦП, других ресурсов, памяти подкачки и времени простоя сервера.

Есть некоторые вещи, которые мне откровенно не нравятся в Grafana. Во-первых, у меня не так много готовых вещей, и мне приходится делать все самому или скачивать панель инструментов из Интернета и модифицировать ее под свои нужды. Второе, и самое важное для меня, это то, что сам парсинг требует много ресурсов и немного накладных расходов. Кроме того, когда создается панель мониторинга, мы должны использовать разные наборы данных, которые также выделяют определенную память из памяти машины. Node_Exporter использует много памяти, и я постараюсь уменьшить ее в будущем.

Я использую другой рабочий стол, который дает мне статистику о Docker и контейнерах в нем. Оттуда я узнал о распределении памяти различными экспортерами. Это дает мне более четкое представление о производительности контейнера, и на основе этого я могу решить, кому выделить сколько памяти, и если это система ручной сборки, где ее улучшить. Вот вторая рабочая среда:</value>
  </data>
  <data name="grafana-intro" xml:space="preserve">
    <value>В этом посте я покажу вам, как я анализирую и просматриваю статистику своего сервера. Это был долгий процесс выбора, и я просмотрел довольно много инструментов анализа, прежде чем выбрать этот. Сначала я знал, что Grafana — хороший инструмент и думал об этом, но не хотел становиться тривиальным и решил попробовать Netdata, потом попробовал Checkmk, потом WebMin, потом другие, но в итоге решил, что Grafana — это инструмент, который дает мне наибольшую свободу в изменении представления и самый большой набор статистики, хотя я думаю, что Netdata дает довольно много «из коробки» вместо того, чтобы вручную создавать их самостоятельно.

Здесь вы можете увидеть изображение моего основного рабочего пространства Grafana. Это моя домашняя страница и показывает использование ресурсов.
У меня есть другие, которые показывают использование контейнеров и т. д.:</value>
  </data>
  <data name="grafana-outro" xml:space="preserve">
    <value>В целом, у Grafana есть свои плюсы и минусы. Я использую довольно много других инструментов, таких как Microsoft AppInsights, которые дали мне довольно хорошую статистику и не повредили производительности. Но это если мы используем Azure, а я сейчас на хосте Docker. Я также пока не вижу места для получения предупреждений и подробных данных об ошибках системы, как у DataDog. Сначала я использовал DataDog, но я не хочу, чтобы системные данные хранились в иностранных компаниях, поэтому я чувствую, что данные не принадлежат мне, они используются другими людьми, особенно если они анализируют данные.

В целом, Grafana дает довольно много свободы, конфиденциальности и красивого представления данных.

Надеюсь, вам понравилось то, что я написал, я старался сохранить как можно больше деталей.

Спасибо за чтение, До скорой встречи,
Танджо</value>
  </data>
  <data name="grafana-title" xml:space="preserve">
    <value>Графана мониторинг</value>
  </data>
</root>