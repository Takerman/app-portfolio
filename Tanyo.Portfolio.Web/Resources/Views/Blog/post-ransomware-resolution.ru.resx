<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ransomware-resolution-content" xml:space="preserve">
    <value>In the last post I described how I've got a Ransoware attack from a hacker and all my backups were encrypted with a strong hashing algorithm. &lt;br /&gt;
I spent some time to research how this can be resolved and found that the hash cannot be decrypted. &lt;br /&gt;
Sometimes people paid to the hackers, but ofthen the hackers disapeared and sent some ransomware attacks in the future too, so I decided not to take any action. &lt;br /&gt;
The backups were not so important as I keep most of my projects in the cloud so If I remove them I will not loose a lot. &lt;br /&gt;
&lt;br /&gt;
I decided to re-install everything and put strong security to my host. &lt;br /&gt;
I tried some famouse operation systems, but in the end I realised that there is no better system for me than DietPi! &lt;br /&gt;
I was not sure if it will work only on Raspberry Pi as in the name of the operation system there is a 'Pi' word, but then I opened the website and found that it works on almost any kind of machines, ARM, PC etc.. &lt;br /&gt;
That's great!&lt;br /&gt;
&lt;br /&gt;
I deleted everything, re-installed with DietPi and worked as a charm.&lt;br /&gt;
The CPU usage is 3 times lower thatn Debian, the RAM usage as twice less. &lt;br /&gt;
There are loads of pre-defined commands and backup software and it was more than better than the Debian OS that I used before. &lt;br /&gt;
&lt;br /&gt;
Now I feel much better. &lt;br /&gt;
&lt;br /&gt;
I had a spare Raspberry Pi and installed on it DietPi on it too. &lt;br /&gt;
Through the command 'dietpi-software' you can install all kind of pre-configured software. &lt;br /&gt;
I choosed Kodi and voila! I made a TV Box. &lt;br /&gt;
I had also an OctoPi OS for my 3D printers and I relised I don't need it too! &lt;br /&gt;
There I installed DietPi + Docker and OctoPi container for each printer instead to have a single board with single OctoPi instance. &lt;br /&gt;
Now I am able to manage multiple 3D Printers and send files to them in paralel. &lt;br /&gt;
I heared about OctoFarm docker image, but when I tested it it happened that it does not work on ARM devices even if I put the platform statement in the docker compose file. &lt;br /&gt;
For now I am using just the OctoPi containers and is fine as it is.&lt;br /&gt;
&lt;br /&gt;
As a summay I would say that after trying more than 25 different OS I am sure that DietPi is my Favourite OS! Works everywhere, the most lightweight, predefined commands and software for everything! What can you want more! I am thinging of starting to donate them in Patreon. &lt;br /&gt;
&lt;br /&gt;
Thank you for reading.</value>
  </data>
  <data name="ransomware-resolution-title" xml:space="preserve">
    <value>Resolution of the Ransoware problem</value>
  </data>
</root>